@{
    ViewData["Title"] = "NLP to SQL Chatbot";
}

<div class="chat-header">
    <h>
        <span id="selectedApproachDisplay" style="display: none;"></span>
        NLP to SQL Chatbot
    </h>
    <div class="dropdown">
        <button class="dropbtn">⋮</button>
        <div class="dropdown-content">
            <a href="#" onclick="selectApproach('Approach 1')">Approach 1</a>
            <a href="#" onclick="selectApproach('ApproachAPI 2')">ApproachAPI 2</a>
            <a href="#" onclick="selectApproach('Approach 3')">Approach 3</a>
        </div>
    </div>
</div>

<div class="chat-container">
    <div id="chat-box" class="chat-box"></div>

    <div class="input-container">
        <input type="text" id="userQuery" placeholder="Type your query..." class="chat-input">
        <button id="sendBtn" class="send-btn">Send</button>
    </div>
    <button id="trainmodel">Start Training</button>
    <button id="retrainmodel">Retrain Model</button>
    <button id="installLibrariesBtn">Install Python Libraries</button>
    <div id="loader" style="display: none; text-align: center; margin-top: 10px;">
        <div class="spinner"></div>
        <p>Installing...</p>
    </div>
    <div id="statusMessage"></div>

    <div id="loader" style="display: none; text-align: center; margin-top: 10px;">
        <div class="spinner"></div>
        <p id="progressText">Training started</p>
    </div>
</div>

@section Scripts {
    <script>
         document.getElementById("installLibrariesBtn").addEventListener("click", function () {
                  let loader = document.getElementById("loader");
        loader.style.display = "block"; // Show the loader
            fetch('@Url.Action("InstallPythonLibraries", "NLP")', {
                method: "POST"
            })
            .then(response => response.json())
            .then(data => {
                loader.style.display = "none"; // Hide the loader
                if (data.success) {
                    alert(data.message);
                } else {
                    alert("Installation failed: " + data.message);
                }
            })
            .catch(error => alert("An error occurred during installation."));
        });
        let selectedApproach = "";
            function selectApproach(approach) {
                debugger;
            selectedApproach = approach;
            let displayElement = document.getElementById("selectedApproachDisplay");
            displayElement.innerText = approach;
            displayElement.style.display = "inline"; // Show the selected approach
        }
        document.getElementById("trainmodel").addEventListener("click", function () {
            if (!selectedApproach) {
                alert("Please select an approach before training.");
                return;
            }
            let statusMessage = document.getElementById("statusMessage");
            let loader = document.getElementById("loader");
            let progressText = document.getElementById("progressText");

            statusMessage.innerHTML = ""; // Clear previous messages
            loader.style.display = "block"; // Show loader
            progressText.innerText = "Training started"; // Initial message

            let dots = 0;
            let interval = setInterval(() => {
                dots = (dots + 1) % 4; // Cycle between 0-3 dots
                progressText.innerText = "Training" + ".".repeat(dots);
            }, 500); // Update every 500ms

            fetch('@Url.Action("TrainModel", "NLP")', {
                method: "POST",
                headers: { "Content-Type": "application/x-www-form-urlencoded" },
                body: "selectedApproach=" + encodeURIComponent(selectedApproach)
            })
            .then(response => response.json())
            .then(data => {
                debugger;
                clearInterval(interval); // Stop dot animation
                loader.style.display = "none"; // Hide loader

                if (data.message && data.accuracy) {
                    statusMessage.innerHTML = `<strong>${data.message}</strong><br>📊 Model Accuracy: <b>${data.accuracy}</b>`;
                    statusMessage.style.color = "green";
                } else {
                    statusMessage.innerHTML = "⚠️ Training completed, but accuracy data is missing.";
                    statusMessage.style.color = "orange";
                }
            })
            .catch(error => {
                clearInterval(interval);
                loader.style.display = "none";
                statusMessage.innerHTML = "Error starting training.";
                statusMessage.style.color = "red";
            });
        });
         document.getElementById("retrainmodel").addEventListener("click", function () {
             debugger;
            if (!selectedApproach) {
                alert("Please select an approach before training.");
                return;
            }
            let statusMessage = document.getElementById("statusMessage");
            let loader = document.getElementById("loader");
            let progressText = document.getElementById("progressText");

            statusMessage.innerHTML = ""; // Clear previous messages
            loader.style.display = "block"; // Show loader
            progressText.innerText = "Training started"; // Initial message

            let dots = 0;
            let interval = setInterval(() => {
                dots = (dots + 1) % 4; // Cycle between 0-3 dots
                progressText.innerText = "Training" + ".".repeat(dots);
            }, 500); // Update every 500ms

            fetch('@Url.Action("RetrainWithFeedback", "NLP")', {
                method: "POST",
                headers: { "Content-Type": "application/x-www-form-urlencoded" }
                // body: "selectedApproach=" + encodeURIComponent(selectedApproach)
            })
            .then(response => response.json())
            .then(data => {
                debugger;
                clearInterval(interval); // Stop dot animation
                loader.style.display = "none"; // Hide loader

                if (data.message && data.accuracy) {
                    statusMessage.innerHTML = `<strong>${data.message}</strong><br>📊 Model Accuracy: <b>${data.accuracy}</b>`;
                    statusMessage.style.color = "green";
                } else {
                    statusMessage.innerHTML = "⚠️ Training completed, but accuracy data is missing.";
                    statusMessage.style.color = "orange";
                }
            })
            .catch(error => {
                clearInterval(interval);
                loader.style.display = "none";
                statusMessage.innerHTML = "Error starting training.";
                statusMessage.style.color = "red";
            });
        });

        document.getElementById("sendBtn").addEventListener("click", function () {
                        debugger;

            let userQuery = document.getElementById("userQuery").value.trim();
            if (!userQuery) return;

            addMessage("user", userQuery);
             showLoader();
            document.getElementById("userQuery").value = "";

                let actionUrl = "";
        switch (selectedApproach) {
            case "ApproachAPI 2":
                actionUrl = '@Url.Action("UseByApi", "NLP")';
                break;
            case "Approach 1":
                actionUrl = '@Url.Action("Predict", "NLP")';
                break;
            case "Approach 3":
                actionUrl = '@Url.Action("PredictTransf", "NLP")'; // Default approach
                break;
            default:
                actionUrl = '@Url.Action("Predict", "NLP")'; // Default approach
        }
            fetch(actionUrl, {
                method: "POST",
                headers: { "Content-Type": "application/x-www-form-urlencoded" },
                body: "userQuery=" + encodeURIComponent(userQuery)
            })
            .then(response => response.json())
            .then(data => {
                            debugger;

                if (data.error) {
                     removeLoader(); // Remove loader when response arrives
                    addMessage("bot", `<b>⚠ Error:</b> ${data.error}`);
                } else {
                    addEditableMessage(userQuery, data.sqlQuery || "Not Available", data.result);
                }
            })
            .catch(error => addMessage("bot", "Something went wrong!"));
        });

        function addMessage(sender, message) {
            let chatBox = document.getElementById("chat-box");
            let msgDiv = document.createElement("div");
            msgDiv.classList.add("chat-message", sender);
            msgDiv.innerHTML = sender === "user"
                ? `<div class="user-icon">👤</div> <div class="msg-text">${message}</div>`
                : `<div class="bot-icon">🤖</div> <div class="msg-text">${message}</div>`;

            chatBox.appendChild(msgDiv);
            chatBox.scrollTop = chatBox.scrollHeight;
        }
        function addEditableMessage(userQuery, sqlQuery, result) {
               removeLoader(); // Remove loader when response arrives
            debugger;
            let chatBox = document.getElementById("chat-box");
            let msgDiv = document.createElement("div");
            msgDiv.classList.add("chat-message", "bot");

            let messageHtml = `
                <div class="bot-icon">🤖</div>
                <div class="msg-text">
                    <b>SQL Query:</b>
                    <span class="sql-text">${sqlQuery}</span>
                    <span class="edit-icon" onclick="enableEditMode(this)">✏</span>
                    <div class="edit-container" style="display:none;">
                        <input type="text" class="edit-input" value="${sqlQuery}">
                        <button class="save-btn" onclick="saveCorrection(this, '${userQuery}')">✔</button>
                        <button class="cancel-btn" onclick="cancelEdit(this)">❌</button>
                    </div>
                </div>`;

            msgDiv.innerHTML = messageHtml;
            chatBox.appendChild(msgDiv);

            if (result && result.columns && result.data.length > 0) {
                let tableHtml = "<table class='chat-table'><thead><tr>";
                result.columns.forEach(col => tableHtml += `<th>${col}</th>`);
                tableHtml += "</tr></thead><tbody>";

                result.data.forEach(row => {
                    tableHtml += "<tr>" + row.map(val => `<td>${val}</td>`).join("") + "</tr>";
                });

                tableHtml += "</tbody></table>";
                addMessage("bot", tableHtml);
            } else {
                addMessage("bot", "No data found.");
            }

            chatBox.scrollTop = chatBox.scrollHeight;
        }
                function showLoader() {
            let chatBox = document.getElementById("chat-box");
            let loaderDiv = document.createElement("div");
            loaderDiv.id = "chat-loader"; // ID for easy removal
            loaderDiv.classList.add("chat-message", "bot", "loader-message");
            loaderDiv.innerHTML = `
                <div class="bot-icon">🤖</div>
                <div class="msg-text">
                    <span class="loader"></span> Processing...
                </div>`;
            chatBox.appendChild(loaderDiv);
            chatBox.scrollTop = chatBox.scrollHeight;
        }
        function removeLoader() {
            let loader = document.getElementById("chat-loader");
            if (loader) {
                loader.remove();
            }
        }

        function enableEditMode(editIcon) {
            let parentDiv = editIcon.closest(".msg-text");
            parentDiv.querySelector(".sql-text").style.display = "none";
            parentDiv.querySelector(".edit-icon").style.display = "none";
            parentDiv.querySelector(".edit-container").style.display = "inline-block";
        }

        function cancelEdit(cancelBtn) {
            let parentDiv = cancelBtn.closest(".msg-text");
            parentDiv.querySelector(".sql-text").style.display = "inline";
            parentDiv.querySelector(".edit-icon").style.display = "inline";
            parentDiv.querySelector(".edit-container").style.display = "none";
        }

        function saveCorrection(saveBtn, userQuery) {
            debugger
            let parentDiv = saveBtn.closest(".msg-text");
            let newSqlQuery = parentDiv.querySelector(".edit-input").value;

            fetch('@Url.Action("CorrectPrediction", "NLP")', {
                method: "POST",
                headers: { "Content-Type": "application/x-www-form-urlencoded" },
                body: `userQuery=${encodeURIComponent(userQuery)}&correctSql=${encodeURIComponent(newSqlQuery)}`
            })
            .then(response => response.text())
            .then(data => {
                parentDiv.querySelector(".sql-text").textContent = newSqlQuery;
                cancelEdit(saveBtn);
            })
            .catch(error => {
                alert("Error saving correction: " + error);
            });
        }

    </script>
}

<style>
    .spinner {
        border: 4px solid rgba(0, 0, 0, 0.1);
        width: 30px;
        height: 30px;
        border-radius: 50%;
        border-left-color: #4CAF50;
        animation: spin 1s linear infinite;
        margin: auto;
    }

    @@keyframes spin {
        to

    {
        transform: rotate(360deg);
    }

    }
    .chat-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 10px;
        background: #007bff;
        color: white;
        border-radius: 8px 8px 0 0;
    }

    .dropdown {
        position: relative;
        display: inline-block;
    }

    .spinner {
        border: 4px solid rgba(0, 0, 0, 0.1);
        width: 36px;
        height: 36px;
        border-radius: 50%;
        border-left-color: #09f;
        animation: spin 1s linear infinite;
    }

    @@keyframes spin {
        0%

    {
        transform: rotate(0deg);
    }

    100% {
        transform: rotate(360deg);
    }

    }
    .dropbtn {
        background: none;
        border: none;
        color: white;
        font-size: 20px;
        cursor: pointer;
    }

    .dropdown-content {
        display: none;
        position: absolute;
        right: 0;
        background-color: white;
        min-width: 120px;
        box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.2);
        z-index: 1;
    }

        .dropdown-content a {
            color: black;
            padding: 8px 12px;
            text-decoration: none;
            display: block;
        }

            .dropdown-content a:hover {
                background-color: #ddd;
            }

    .dropdown:hover .dropdown-content {
        display: block;
    }

    .chat-message {
        display: flex;
        align-items: center;
        padding: 10px;
        border-radius: 10px;
        margin: 5px 0;
        max-width: 80%;
        word-wrap: break-word;
        transition: opacity 0.3s ease-in-out;
    }

    .edit-icon {
        cursor: pointer;
        margin-left: 10px;
        font-size: 14px;
        color: #007bff;
    }

    .edit-container {
        display: none;
        margin-top: 5px;
    }

    .edit-input {
        width: 70%;
        padding: 5px;
        font-size: 14px;
    }

    .save-btn, .cancel-btn {
        margin-left: 5px;
        padding: 5px 10px;
        border: none;
        cursor: pointer;
    }

    .save-btn {
        background: green;
        color: white;
    }

    .cancel-btn {
        background: red;
        color: white;
    }

    body {
        font-family: 'Arial', sans-serif;
        background-color: #f8f9fa;
        /* display: flex; */
        justify-content: center;
        align-items: center;
        height: 100vh;
    }

    .chat-container {
        /* width: 50%;
                    max-width: 600px; */
        background: #fff;
        border-radius: 12px;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
        padding: 15px;
        display: flex;
        flex-direction: column;
    }

    .chat-box {
        height: 400px;
        overflow-y: auto;
        padding: 10px;
        border: 1px solid #ddd;
        background: #ffffff;
        border-radius: 8px;
        display: flex;
        flex-direction: column;
    }

    .input-container {
        display: flex;
        margin-top: 10px;
    }

    .chat-input {
        flex: 1;
        padding: 12px;
        border: 1px solid #ccc;
        border-radius: 8px;
        font-size: 16px;
        outline: none;
        transition: border-color 0.3s;
    }

        .chat-input:focus {
            border-color: #007bff;
        }

    .send-btn {
        padding: 12px 18px;
        border: none;
        background: #007bff;
        color: white;
        border-radius: 8px;
        cursor: pointer;
        font-size: 16px;
        margin-left: 10px;
        transition: background 0.3s;
    }

        .send-btn:hover {
            background: #0056b3;
        }

    .chat-message {
        display: flex;
        align-items: center;
        padding: 10px 15px;
        border-radius: 10px;
        margin: 5px 0;
        max-width: 80%;
        word-wrap: break-word;
        transition: opacity 0.3s ease-in-out;
    }

    .user {
        background: #007bff;
        color: white;
        align-self: flex-end;
        text-align: right;
        border-top-right-radius: 2px;
        justify-content: flex-end;
    }

    .bot {
        /* background: #28a745;
                    color: white; */
        text-align: left;
        border-top-left-radius: 2px;
        justify-content: flex-start;
    }

    .user-icon, .bot-icon {
        width: 35px;
        height: 35px;
        display: flex;
        justify-content: center;
        align-items: center;
        font-size: 20px;
        margin-right: 10px;
    }

    .user-icon {
        background: #007bff;
        color: white;
        border-radius: 50%;
    }

    .bot-icon {
        background: #28a745;
        color: white;
        border-radius: 50%;
    }

    .msg-text {
        flex: 1;
        padding: 10px;
        border-radius: 8px;
    }

    .chat-table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 10px;
        background: white;
        border-radius: 8px;
        overflow: hidden;
    }

        .chat-table th, .chat-table td {
            border: 1px solid #ddd;
            padding: 10px;
            text-align: left;
        }

        .chat-table th {
            background: #007bff;
            color: white;
        }

    .loader-message {
        display: flex;
        align-items: center;
    }

    .loader {
        display: inline-block;
        width: 12px;
        height: 12px;
        border: 2px solid #ccc;
        border-top: 2px solid #007bff;
        border-radius: 50%;
        animation: spin 1s linear infinite;
        margin-right: 8px;
    }

    @@keyframes spin {
        0%

    {
        transform: rotate(0deg);
    }

    100% {
        transform: rotate(360deg);
    }

    }
</style>
