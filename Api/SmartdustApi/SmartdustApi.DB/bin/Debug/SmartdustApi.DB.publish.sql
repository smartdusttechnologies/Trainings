/*
Deployment script for api

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "api"
:setvar DefaultFilePrefix "api"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL16.SQLEXPRESS\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL16.SQLEXPRESS\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL,
                RECOVERY FULL 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET PAGE_VERIFY NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE (QUERY_CAPTURE_MODE = ALL, CLEANUP_POLICY = (STALE_QUERY_THRESHOLD_DAYS = 367), MAX_STORAGE_SIZE_MB = 100) 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE = OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
/*
The column [dbo].[User].[OrgId] on table [dbo].[User] must be added, but the column has no default value and does not allow NULL values. If the table contains data, the ALTER script will not work. To avoid this issue you must either: add a default value to the column, mark it as allowing NULL values, or enable the generation of smart-defaults as a deployment option.
*/

IF EXISTS (select top 1 1 from [dbo].[User])
    RAISERROR (N'Rows were detected. The schema update is terminating because data loss might occur.', 16, 127) WITH NOWAIT

GO
PRINT N'Dropping Default Constraint [dbo].[D_User_IsDeleted]...';


GO
ALTER TABLE [dbo].[User] DROP CONSTRAINT [D_User_IsDeleted];


GO
PRINT N'Starting rebuilding table [dbo].[User]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_User] (
    [Id]                     BIGINT         IDENTITY (1, 1) NOT NULL,
    [UserName]               NVARCHAR (100) NULL,
    [FirstName]              NVARCHAR (50)  NOT NULL,
    [LastName]               NVARCHAR (50)  NULL,
    [Email]                  NVARCHAR (100) NOT NULL,
    [Mobile]                 NVARCHAR (50)  NOT NULL,
    [Country]                NVARCHAR (100) NULL,
    [ISDCode]                NVARCHAR (50)  NULL,
    [TwoFactor]              BIT            NULL,
    [Locked]                 BIT            NULL,
    [IsActive]               BIT            NULL,
    [EmailValidationStatus]  SMALLINT       NULL,
    [MobileValidationStatus] SMALLINT       NULL,
    [OrgId]                  INT            NOT NULL,
    [AdminLevel]             SMALLINT       NOT NULL,
    [IsDeleted]              BIT            CONSTRAINT [D_User_IsDeleted] DEFAULT ((0)) NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_PK_User1] PRIMARY KEY CLUSTERED ([Id] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[User])
    BEGIN
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_User] ON;
        INSERT INTO [dbo].[tmp_ms_xx_User] ([Id], [UserName], [FirstName], [LastName], [Email], [Mobile], [Country], [ISDCode], [TwoFactor], [Locked], [IsActive], [EmailValidationStatus], [MobileValidationStatus], [AdminLevel], [IsDeleted])
        SELECT   [Id],
                 [UserName],
                 [FirstName],
                 [LastName],
                 [Email],
                 [Mobile],
                 [Country],
                 [ISDCode],
                 [TwoFactor],
                 [Locked],
                 [IsActive],
                 [EmailValidationStatus],
                 [MobileValidationStatus],
                 [AdminLevel],
                 [IsDeleted]
        FROM     [dbo].[User]
        ORDER BY [Id] ASC;
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_User] OFF;
    END

DROP TABLE [dbo].[User];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_User]', N'User';

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_constraint_PK_User1]', N'PK_User', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating Table [dbo].[LoginLog]...';


GO
CREATE TABLE [dbo].[LoginLog] (
    [Id]           BIGINT         IDENTITY (1, 1) NOT NULL,
    [UserId]       BIGINT         NOT NULL,
    [LoginDate]    DATETIME       NOT NULL,
    [Status]       SMALLINT       NOT NULL,
    [UserName]     NVARCHAR (100) NOT NULL,
    [PasswordHash] NVARCHAR (100) NOT NULL,
    [IPAddress]    NVARCHAR (50)  NULL,
    [Browser]      NVARCHAR (50)  NULL,
    [DeviceCode]   NVARCHAR (20)  NULL,
    [DeviceName]   NVARCHAR (20)  NULL,
    CONSTRAINT [PK_LoginLog] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [dbo].[LoginToken]...';


GO
CREATE TABLE [dbo].[LoginToken] (
    [Id]                 BIGINT          IDENTITY (1, 1) NOT NULL,
    [UserId]             BIGINT          NOT NULL,
    [AccessToken]        NVARCHAR (1000) NOT NULL,
    [RefreshToken]       NVARCHAR (1000) NULL,
    [AccessTokenExpiry]  DATETIME        NOT NULL,
    [DeviceCode]         NVARCHAR (50)   NULL,
    [DeviceName]         NVARCHAR (50)   NULL,
    [RefreshTokenExpiry] DATETIME        NULL,
    CONSTRAINT [PK_LoginToken] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [dbo].[LoginTokenLog]...';


GO
CREATE TABLE [dbo].[LoginTokenLog] (
    [Id]                 BIGINT         IDENTITY (1, 1) NOT NULL,
    [UserId]             BIGINT         NOT NULL,
    [AccessToken]        NVARCHAR (MAX) NOT NULL,
    [RefreshTokenExpiry] DATETIME       NULL,
    [DeviceCode]         NVARCHAR (50)  NULL,
    [DeviceName]         NVARCHAR (50)  NULL,
    [RefreshToken]       NVARCHAR (MAX) NULL,
    [AccessTokenExpiry]  DATETIME       NOT NULL,
    CONSTRAINT [PK_LoginTokenLog] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [dbo].[PasswordLogin]...';


GO
CREATE TABLE [dbo].[PasswordLogin] (
    [Id]           BIGINT          IDENTITY (1, 1) NOT NULL,
    [PasswordHash] NVARCHAR (1000) NOT NULL,
    [PasswordSalt] NVARCHAR (1000) NOT NULL,
    [UserId]       BIGINT          NOT NULL,
    [ChangeDate]   DATETIME        NULL,
    CONSTRAINT [PK_PasswordLogin] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [dbo].[PasswordPolicy]...';


GO
CREATE TABLE [dbo].[PasswordPolicy] (
    [Id]                 INT           IDENTITY (1, 1) NOT NULL,
    [MinCaps]            SMALLINT      NOT NULL,
    [MinSmallChars]      SMALLINT      NOT NULL,
    [MinSpecialChars]    SMALLINT      NOT NULL,
    [MinNumber]          SMALLINT      NOT NULL,
    [MinLength]          SMALLINT      NOT NULL,
    [AllowUserName]      BIT           NOT NULL,
    [DisAllPastPassword] SMALLINT      NOT NULL,
    [DisAllowedChars]    NVARCHAR (50) NULL,
    [ChangeIntervalDays] SMALLINT      NOT NULL,
    [OrgId]              INT           NOT NULL,
    [IsDeleted]          BIT           NOT NULL,
    CONSTRAINT [PK_PasswordPolicy] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Default Constraint [dbo].[D_PasswordPolicy_IsDeleted]...';


GO
ALTER TABLE [dbo].[PasswordPolicy]
    ADD CONSTRAINT [D_PasswordPolicy_IsDeleted] DEFAULT ((0)) FOR [IsDeleted];


GO
PRINT N'Creating Foreign Key [dbo].[FK_LoginLog_User]...';


GO
ALTER TABLE [dbo].[LoginLog] WITH NOCHECK
    ADD CONSTRAINT [FK_LoginLog_User] FOREIGN KEY ([UserId]) REFERENCES [dbo].[User] ([Id]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_LoginToken_User]...';


GO
ALTER TABLE [dbo].[LoginToken] WITH NOCHECK
    ADD CONSTRAINT [FK_LoginToken_User] FOREIGN KEY ([UserId]) REFERENCES [dbo].[User] ([Id]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_LoginTokenLog_User]...';


GO
ALTER TABLE [dbo].[LoginTokenLog] WITH NOCHECK
    ADD CONSTRAINT [FK_LoginTokenLog_User] FOREIGN KEY ([UserId]) REFERENCES [dbo].[User] ([Id]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_PasswordLogin_User]...';


GO
ALTER TABLE [dbo].[PasswordLogin] WITH NOCHECK
    ADD CONSTRAINT [FK_PasswordLogin_User] FOREIGN KEY ([UserId]) REFERENCES [dbo].[User] ([Id]);


GO
PRINT N'Checking existing data against newly created constraints';


GO
USE [$(DatabaseName)];


GO
ALTER TABLE [dbo].[LoginLog] WITH CHECK CHECK CONSTRAINT [FK_LoginLog_User];

ALTER TABLE [dbo].[LoginToken] WITH CHECK CHECK CONSTRAINT [FK_LoginToken_User];

ALTER TABLE [dbo].[LoginTokenLog] WITH CHECK CHECK CONSTRAINT [FK_LoginTokenLog_User];

ALTER TABLE [dbo].[PasswordLogin] WITH CHECK CHECK CONSTRAINT [FK_PasswordLogin_User];


GO
PRINT N'Update complete.';


GO
