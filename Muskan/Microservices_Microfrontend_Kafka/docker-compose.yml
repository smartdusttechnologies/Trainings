services:
  commondb:
    image: mcr.microsoft.com/mssql/server
  # catalogdb:
  #   image: mcr.microsoft.com/mssql/server
  # basketdb:
  #   image: mcr.microsoft.com/mssql/server
  # orderdb:
  #   image: mcr.microsoft.com/mssql/server
  distributedcache:
    image: redis

  messagebroker:
    image: rabbitmq:management
  catalog.api:
    image: ${DOCKER_REGISTRY-}catalogapi
    build:
      context: Microservices\Product\src
      dockerfile: Services\Catalog\Catalog.API\Dockerfile
    networks:
      - microservices_network
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - microservices_network

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    ports:
      - "9092:9092"  # Expose port 9092 for host
      - "9093:9093"  # Expose port 9093 internally within the Docker network
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      # KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      # KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL: PLAINTEXT
      KAFKA_LISTENERS: INSIDE://0.0.0.0:9093,OUTSIDE://0.0.0.0:9092  # Kafka listening on all interfaces inside the container
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9093, OUTSIDE://localhost:9092  # Kafka advertised listeners
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_LISTENER_NAME_INSIDE_LISTENER: INSIDE
      KAFKA_LISTENER_NAME_OUTSIDE_LISTENER: OUTSIDE
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_LISTENER_PORT: 9093
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper
    networks:
      - microservices_network

  basket.api:
    image: ${DOCKER_REGISTRY-}basketapi
    build:
      context: Microservices/Basket/src
      dockerfile: Services/Basket/Basket.API/Dockerfile
    networks:
      - microservices_network
  discount.grpc:
    image: ${DOCKER_REGISTRY-}discountgrpc
    build:
      context: Microservices/Basket/src
      dockerfile: Services/Discount/Discount.Grpc/Dockerfile
    networks:
      - microservices_network
  ordering.api:
    image: ${DOCKER_REGISTRY-}orderingapi
    build:
      context: Microservices/Order/src
      dockerfile: Services/Order/Order.API/Dockerfile
    networks:
      - microservices_network

  ocelotapigateway:
    image: ocelotapigateway
    build:
     context: ./Microservices/OcelotGateway  
     dockerfile: src/Ocelotgateway/Dockerfile 
    networks:
      - microservices_network

  # yarpapigateway:
  #   image: ${DOCKER_REGISTRY-}yarpapigateway
  #   build:
  #     context: Microservices/APiGateway/src
  #     dockerfile: APiGateway/YarpAPIGateway/Dockerfile
  #   networks:
  #     - microservices_network
  # volumes:
  # sqlserver_commondb:
  # sqlserver_order:
  # sqlserver_catalog:
  # sqlserver_basket:

  security:
    image: ${DOCKER_REGISTRY-}security
    build:
      context: ./Microservices/Common
      dockerfile: src/Security/Security/Dockerfile
    networks:
      - microservices_network
  logging.api:
    image: ${DOCKER_REGISTRY-}loggingapi
    build:
      context: ./Microservices/Common
      dockerfile: src/Logging/Logging.API/Dockerfile
    networks:
      - microservices_network
  shopping.web:
    image: ${DOCKER_REGISTRY-}shoppingweb
    build:
      context: ./Microservices/ShoppingWeb/src
      dockerfile: WebApps/Shopping.Web/Dockerfile
    networks:
      - microservices_network
  container:
    image: container
    build:
      context: ./Microfrontend/container
      dockerfile: Dockerfile
    environment:
      NODE_ENV: production
    ports:
      - "3000:3000"
    networks:
      - microservices_network
  marketing:
    image: marketing
    build:
      context: ./Microfrontend/marketing
      dockerfile: Dockerfile
    environment:
      NODE_ENV: production
    ports:
      - "3001:3001"
    networks:
      - microservices_network
  auth:
    image: auth
    build:
      context: ./Microfrontend/auth
      dockerfile: Dockerfile
    environment:
      NODE_ENV: production
    ports:
      - "3002:3002"
    networks:
      - microservices_network
  dashboard:
    image: dashboard
    build:
      context: ./Microfrontend/dashboard
      dockerfile: Dockerfile
    environment:
      NODE_ENV: production
    ports:
      - "3003:3003"
    networks:
      - microservices_network
  product:
    image: product
    build:
      context: ./Microfrontend/product
      dockerfile: Dockerfile
    environment:
      NODE_ENV: production
    ports:
      - "3004:3004"
    networks:
      - microservices_network
  basket:
    image: basket
    build:
      context: ./Microfrontend/basket
      dockerfile: Dockerfile
    environment:
      NODE_ENV: production
    ports:
      - "3005:3005"
    networks:
      - microservices_network
  order:
    image: order
    build:
      context: ./Microfrontend/order
      dockerfile: Dockerfile
    environment:
      NODE_ENV: production
    ports:
      - "3006:3006"
    networks:
      - microservices_network
networks:
  microservices_network:
    driver: bridge

